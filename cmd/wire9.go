package main

import (
	"flag"
	"fmt"
	"go/ast"
	"log"
	"os"

	"github.com/as/wire9"
)

const message = `// MACHINE GENERATED BY 'go generate' COMMAND
// TO EDIT A TYPE OR METHOD, COPY IT TO ANOTHER FILE IN THE PACKAGE`

var (
	nofmt    = flag.Bool("d", false, "debug: no gofmt")
	verbose  = flag.Bool("v", false, "debug: be verbose")
	filename = flag.String("f", "", "output file name (default stdout")
)

func usage() {
	fmt.Fprintf(os.Stderr, "usage: wire9 [-f outfile] [path ...]\n")
	os.Exit(0)
}

func init() {
	flag.Parse()
}

func main() {
	a := flag.Args()
	if len(a) == 0 {
		log.Fatal("usage: wire9 [-d -v -f] package")
	}
	dopackage(a[0])
}

type visitor struct {
	*wire9.TypeInfo
	last ast.Node
}

func (v *visitor) Visit(n ast.Node) ast.Visitor {
	switch t := n.(type) {
	case *ast.Package, *ast.TypeSpec, *ast.FuncDecl, *ast.File:
		return v
	case *ast.Ident:
		switch l := v.last.(type) {
		case *ast.FuncDecl:
			fmt.Println(l.Name)
		}
	}
	return nil
}

func Trace(n ast.Node) {
	ast.Walk(&visitor{wire9.TInfo, nil})
}

func dopackage(dir string) {
	pkg, err := wire9.OpenPackage(dir, false)
	no(err)

	for k, v := range pkg.Info.Types {
		fmt.Println(k, v)
	}

	Trace(pkg)

	wire, err := wire9.FromPackage(pkg, !*nofmt)
	no(err)

	var out *os.File
	if *filename == "" {
		out = os.Stdout
	} else {
		fd, err := os.OpenFile(*filename, os.O_WRONLY, 0644)
		if err != nil {
			log.Fatal(err)
		}
		defer fd.Close()
		out = fd
	}

	_, err = fmt.Fprintf(out, "%s\n%s", message, wire.Data)
	no(err)
}

func dopackage2(dir string) {
	pkg, err := wire9.OpenPackage(dir, true)
	no(err)

	wire, err := wire9.FromPackage(pkg, !*nofmt)
	no(err)

	var out *os.File
	if *filename == "" {
		out = os.Stdout
	} else {
		fd, err := os.OpenFile(*filename, os.O_WRONLY, 0644)
		no(err)

		defer fd.Close()
		out = fd
	}

	_, err = fmt.Fprintf(out, "%s\n%s", message, wire.Data)
	no(err)
}

func no(err error) {
	if err != nil {
		log.Fatal(err)
	}
}
