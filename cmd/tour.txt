#
# Text

package main

import "fmt"

type Some struct{
	name string
}

func main(){
	fmt.Println("hello world")
}

#
# Scanner

token.PACKAGE token.IDENT

token.IMPORT token.STRING

token.TYPE token.IDENT token.IDENT token.LBRACE
	token.IDENT token.IDENT token.SEMICOLON
token.RBRACE

token.FUNC token.IDENT token.LPAREN token.RPAREN token.LBRACE
	token.IDENT token.DOT token.IDENT token.LPAREN token.STRING token.RPAREN token.SEMICOLON
token.RBRACE

#
# Parser

token.PACKAGE &ast.Ident{Name: "main"}

token.IMPORT &ast.Ident{Name: "fmt"}

token.TYPE &ast.Ident{Name: "Some"} &ast.StructType{Fields:(*ast.FieldList)(0x8af3140), Incomplete:false}}
	&ast.Ident{Name: "name"} &ast.Ident{Name: "string"}
}

token.FUNC &ast.Ident{Name: "main"} token.LPAREN token.RPAREN token.LBRACE
	&ast.Ident{Name:"fmt"}
		&ast.SelectorExpr{X:(*ast.Ident), Sel:(*ast.Ident)}
	&ast.Ident{Name:"Println"}
		&ast.CallExpr{Fun:(*ast.SelectorExpr)(0x8a85880), Args:[]ast.Expr{(*ast.BasicLit)(0x8a858a0)}}
			&ast.Ident{Name: "hello world"})
token.RBRACE

#
# Type Checker


package <nil>

import &types.PkgName{object:types.object{parent:(*types.Scope)(0x8af0b40),pos:22, pkg:(*types.Package)(0x8af0af0),name:"fmt", typ:(*types.Basic)(0x615640),order_:0x0, scopePos_:0},imported:(*types.Package)(0x8af10e0), used:true}

type types.TypeAndValue{mode:0x3, Type:(*types.Struct)(0x8a988a0), Value:constant.Value(nil)} struct{
    &types.TypeName{object:types.object{parent:(*types.Scope)(0x8af0aa0), pos:35, pkg:(*types.Package)(0x8af0af0), name:"Some", typ:(*types.Named)(0x8b84180), order_:0x1, scopePos_:0}}
	   &types.Var{object:types.object{parent:(*types.Scope)(nil), pos:49, pkg:(*types.Package)(0x8af0af0), name:"name", typ:(*types.Basic)(0x615860), order_:0x0, scopePos_:0}, anonymous:false, visited:false, isField:true, used:false} 		&types.TypeName{object:types.object{parent:(*types.Scope)(0x8a860a0), pos:0, pkg:(*types.Package)(nil), name:"string", typ:(*types.Basic)(0x615860), order_:0x0, scopePos_:0}}
}

func &types.Func{object:types.object{parent:(*types.Scope)(0x8af0aa0), pos:69, pkg:(*types.Package)(0x8af0af0), name:"main", typ:(*types.Signature)(0x8b841e0), order_:0x2, scopePos_:0}}(){
	&types.PkgName{object:types.object{parent:(*types.Scope)(0x8af0b40), pos:22, pkg:(*types.Package)(0x8af0af0), name:"fmt", typ:(*types.Basic)(0x615640), order_:0x0, scopePos_:0}, imported:(*types.Package)(0x8af10e0), used:true}.		&types.Func{object:types.object{parent:(*types.Scope)(0x8af1090), pos:0, pkg:(*types.Package)(0x8af10e0), name:"Println", typ:(*types.Signature)(0x8af3b90), order_:0x0, scopePos_:0}}("hello world")
}

#
# Type Checker: Info Values

token.PACKAGE Defs

token.IMPORT Implicits

token.TYPE Defs Types token.LBRACK
	Defs Types+Uses token.SEMICOLON
token.RBRACK

func Defs() token.LBRACK
	Uses token.DOT Types Types+Uses(Types);
token.RBRACK



type ast.File struct {
	Name       *Ident          // package name
	Scope      *Scope          // package scope (this file only)
	Imports    []*ImportSpec   // imports in this file
	Unresolved []*Ident        // unresolved identifiers in this file
	Comments   []*CommentGroup // list of all comments in the source file
}


x := &ast.File{
	Doc: nil,
	Package:1,
	Name: &ast.Ident{Name: "main"}
	Decls:[]ast.Decl{
		&ast.GenDecl{
			TokPos:15,
			Tok:token.IMPORT,
			Specs:[]ast.Spec{
				&ast.ImportSpec{&ast.BasicLit{ValuePos:22, Kind: token.STRING, Value: "\"fmt\""}},
			},
			EndPos:0
			Rparen:0
		},
		&ast.GenDecl{
			TokPos:30,
			Tok:84, 
			Specs:[]ast.Spec{
				&ast.TypeSpec{Name: &ast.Ident{NamePos:35, Name: "Some", Obj: &ast.Object{Kind: type, Name: "Some", }}} // Decl: "*(obj @ 28)"
				&ast.StructType{
					Struct: 40,
					Fields: &ast.FieldList{
						Opening: 46,
						List: []*ast.Field{
							Names: []*ast.Ident{&ast.Ident{NamePos: 49, Name: "name", Obj: &ast.Object{Kind: token.VAR, Name: "name", }}}, // Decl: "*(obj @ 43)"
							Type: *ast.Ident{NamePos:54, Name: "string"},
						}
						Closing: 61,
					}
					Incomplete: false,
				},
				Rparen:0,
			},
		},
		&ast.FuncDecl{
			Name: &ast.Ident{Name:"main", NamePos: 69, Obj: &ast.Object{Kind: token.FUNC, Name: "main", }},	// Decl: "*(obj @ 69)"
			Type: &ast.FuncType{64, Params: &ast.FieldList{Opening:73, Closing: 74}},
			Body: &ast.BlockStmt{
				Lbrace: 75,
				List: []ast.Stmt{
					&ast.CallExpr{
						Fun: &ast.SelectorExpr{
							X:   &ast.Ident{Name: "fmt",     NamePos: 78},
							Sel: &ast.Ident{Name: "Println", NamePos: 82},
						},
						Lparen: 89,
						Args: *ast.BasicLit{ValuePos: 90, Kind: tok.STRING, Value: "\"hello world\""}
						Ellipsis: 0
						Rparen: 103,
					},
				},
			},
			Rbrace: 105,
		},
	},
	Scope: &ast.Scope{}
	Imports: []*ast.ImportSpec{}
	Unresolved: []*ast.Ident{}
}

x.Decls[1].Specs[0].Name.Obj.Decl = x.Decls[1].Specs[0]                                            // Decl: "*(obj @ 28)"
x.Decls[1].Specs[0].Type.Fields.List[0].Names[0].Obj.Decl =x.Decls[1].Specs[0].Type.Fields.List[0] // Decl: "*(obj @ 43)"
x.Decls[2].Name.Obj.Decl = x.Decls[2]                                                              // Decl: "*(obj @ 69)"

// Look at Scope, Imports and Unresolved now. Complete it
Specs1 := []ast.Spec{&ast.ImportSpec{&ast.BasicLit{ValuePos:22, Kind: token.STRING, Value: "\"fmt\""}},}


var SomeType *ast.TypeSpec
SomeObj   := &ast.Object{Kind: type, Name: "Some", Decl: SomeType}
SomeIdent := &ast.Ident{NamePos:35,  Name: "Some", Obj:   SomeObj}
SomeType.(*ast.TypeSpec).Name = SomeIdent


type GenDecl struct {
	Doc    *CommentGroup // associated documentation; or nil
	TokPos token.Pos     // position of Tok
	Tok    token.Token   // IMPORT, CONST, TYPE, VAR
	Lparen token.Pos     // position of '(', if any
	Specs  []Spec
	Rparen token.Pos // position of ')', if any
}
    A GenDecl node (generic declaration node) represents an import, constant,
    type or variable declaration. A valid Lparen position (Lparen.Line > 0)
    indicates a parenthesized declaration.

    Relationship between Tok value and Specs element type:

    token.IMPORT  *ImportSpec
    token.CONST   *ValueSpec
    token.TYPE    *TypeSpec
    token.VAR     *ValueSpec



	Scope:(*ast.Scope)(0x8a5bdc0),
	Unresolved:[]*ast.Ident{(*ast.Ident)(0x8a857a0), (*ast.Ident)(0x8a85840)}
	Imports:[]*ast.ImportSpec{(*ast.ImportSpec)(0x8af30e0)},
	Comments: nil,
}

&ast.File{
	Doc: nil,
	Package:1,
	Name:(*ast.Ident)(0x8a85700),
	Decls:[]ast.Decl{(*ast.GenDecl)(0x8af4400), (*ast.GenDecl)(0x8af4480), (*ast.FuncDecl)(0x8af3320)}
	Scope:(*ast.Scope)(0x8a5bdc0),
	Unresolved:[]*ast.Ident{(*ast.Ident)(0x8a857a0), (*ast.Ident)(0x8a85840)},
	Imports:[]*ast.ImportSpec{(*ast.ImportSpec)(0x8af30e0)},
	Comments:[]*ast.CommentGroup(nil)}